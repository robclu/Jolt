#==--- Jolt/src/CMakeLists.txt ---------------------------------------------==#

#==--- Includes ------------------------------------------------------------==#

INCLUDE_DIRECTORIES(
  ${Blitz_ROOT}/include
  ${Jolt_SOURCE_DIR}/include)

LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

SET(TEST_BIN_DIR ${Jolt_SOURCE_DIR}/bin     )
SET(ASM_DIR      ${Jolt_SOURCE_DIR}/assembly)

SET(CPU_DETECTED "YES" CACHE STRING "CPU Detected" FORCE)
SET(PROC_COUNT   0     CACHE STRING "Detecting Processor Count" FORCE)
ADD_DEFINITIONS(-DCPU_DETECTED)

# LINUX:
SET(CPUINFO_FILE "/proc/cpuinfo")
IF(EXISTS "${CPUINFO_FILE}")
  FILE(STRINGS "${CPUINFO_FILE}" procs REGEX "^processor.: [0-9]+$")
  LIST(LENGTH procs PROC_COUNT)
ENDIF()

# APPLE:
IF(APPLE)
  EXEC_PROGRAM(sysctl ARGS "-a | grep machdep.cpu" OUTPUT_VARIABLE CPU_INFO)
  STRING(REGEX MATCH "core_count: [0-9]+" PROC_STRING ${CPU_INFO})
  STRING(REGEX MATCH "[0-9]+" PROCESSOR_COUNT ${PROC_STRING})
  SET(PROC_COUNT ${PROCESSOR_COUNT} CACHE STRING "Num Processors" FORCE)
ENDIF(APPLE)

# Windows:
IF(WIN32)
  SET(PROC_COUNT "$ENV{NUMBER_OF_PROCESSORS}")
ENDIF()

ADD_DEFINITIONS(-DCPU_CORES=${PROC_COUNT})

#==--- Vector instructions : CPU -------------------------------------------==#

SET(ENABLE_AVX TRUE)
SET(ENABLE_SSE TRUE)

IF(APPLE)
  STRING(REGEX MATCH "SSE" SSE_FOUND ${CPU_INFO})
  STRING(COMPARE EQUAL "SSE" "{SSE_FOUND}" SSE_TRUE)

  STRING(REGEX MATCH "SSE2" SSE2_FOUND ${CPU_INFO})
  STRING(COMPARE EQUAL "SSE2" "${SSE2_FOUND}" SSE2_TRUE)

  STRING(REGEX MATCH "SSSE3" SSSE3_FOUND ${CPU_INFO})
  STRING(COMPARE EQUAL "SSSE3" "${SSSE3_FOUND}" SSSE3_TRUE)

  STRING(REGEX MATCH "SSE4.1" SSE41_FOUND ${CPU_INFO})
  STRING(COMPARE EQUAL "SSE4.1" "${SSE41_FOUND}" SSE41_TRUE)

  STRING(REGEX MATCH "SSE4.2" SSE4,2_FOUND ${CPU_INFO})
  STRING(COMPARE EQUAL "SSE4.2" "${SSE42_FOUND}" SSE42_TRUE)

  STRING(REGEX MATCH "AVX1.0" AVX1_FOUND ${CPU_INFO})
  STRING(COMPARE EQUAL "AVX1.0" "${AVX1_FOUND}" AVX1_TRUE)

  STRING(REGEX MATCH "AVX2.0" AVX2_FOUND ${CPU_INFO})
  STRING(COMPARE EQUAL "AVX2.0" "${AVX2_FOUND}" AVX2_TRUE)
ENDIF(APPLE)

# Check which vectorized instructions were found and add them:
IF(AVX2_TRUE AND ENABLE_AVX)
  ADD_DEFINITIONS(-DAVX2)
ELSEIF(AVX1_TRUE AND ENABLE_AVX)
  ADD_DEFINITIONS(-DAVX1)
ELSEIF(SSE42_TRUE AND ENABLE_SSE)
  ADD_DEFINITIONS(-SSE42)
ELSEIF(SSE41_TRUE AND ENABLE_SSE)
  ADD_DEFINITIONS(-SSE41)
ELSEIF(SSSE3_TRUE AND ENABLE_SSE)
  ADD_DEFINITIONS(-SSSE3)
ELSEIF(SSE2_TRUE AND ENABLE_SSE)
  ADD_DEFINITIONS(-SSE2)
ELSEIF(SSE_TRUE AND ENABLE_SSE)
  ADD_DEFINITIONS(-SSE)
ELSE(AVX2_TRUE AND ENABLE_AVX)

ENDIF(AVX2_TRUE AND ENABLE_AVX)

#==--- Make Test Function --------------------------------------------------==#

FUNCTION(MakeTest TestName TestFiles TestLibs TestBinDir)
  ADD_EXECUTABLE(${${TestName}} ${${TestFiles}})

  TARGET_LINK_LIBRARIES(${${TestName}} ${${TestLibs}})

  # Move test binary to the correct directory
  SET_TARGET_PROPERTIES(${${TestName}} PROPERTIES RUNTIME_OUTPUT_DIRECTORY
    ${${TestBinDir}})

  ADD_TEST(NAME ${${TestName}} WORKING_DIRECTORY ${${TestBinDir}} COMMAND
    ${${TestBinDir}}/${${TestName}})
ENDFUNCTION()

FUNCTION(MakeAsm AsmName AsmInputFiles AsmLibs AsmDir)
  ADD_EXECUTABLE(${${AsmName}} ${${AsmInputFiles}})

  TARGET_LINK_LIBRARIES(${${AsmName}} ${${AsmLibs}})

  SET_TARGET_PROPERTIES(${${AsmName}} PROPERTIES RUNTIME_OUTPUT_DIRECTORY
    ${${AsmDir}})
ENDFUNCTION()

#==--- Benchmark Tests -----------------------------------------------------==#

SET(SOURCES )
SET(TEST_NAME  BenchmarkTests)
SET(TEST_FILES BenchmarkTests.cpp ${SOURCES})
SET(TEST_LIBS -L/opt/blitz/lib -lblitz)

MakeTest(TEST_NAME TEST_FILES TEST_LIBS TEST_BIN_DIR)

IF(GENERATE_ASM)
  set(ASM_NAME  BenchmarkTestsAsm)
  set(ASM_FILES BenchmarkTests.cc)
  set(ASM_LIBS  ${TEST_LIBS})
  MakeAsm(ASM_NAME ASM_FILES ASM_LIBS ASM_DIR)
ENDIF()

#==-------------------------------------------------------------------------==#
